word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
View(dt_lyrics)
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
library(ggplot2)
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free_x")
country_corpus <- VCorpus(VectorSource(Country$stemmedwords))
country_word_tibble <- tidy(country_corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
nrc_sadness<-get_sentiments("nrc") %>%
filter(sentiment == "sadness")
country_word_tibble %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
country_word_tibble %>%
inner_join(nrc_sadness) %>%
count(word, sort = TRUE)
View(nrc_sadness)
View(nrc_joy)
View(Metal)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free_y")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 1, scales = "free_y")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 4, scales = "free_y")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "fixed")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 8, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 50, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = (positive - negative)/10)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 10, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = (positive - negative)/10)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 30,  vjust = 0.5, hjust = 0.5))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 30,  vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 30,  vjust = 0.5, hjust = 0.5))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 30, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 30, vjust = 0.5, hjust = 0.5),plot.title = element_text(face = "bold", size = 30, vjust = 0.5,hjust=0.5))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 30, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 30, vjust = 0.5, hjust = 0.5),strip.text = element_text(face = 'bold', size = 30))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 30, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 30, vjust = 0.5, hjust = 0.5),strip.text = element_text(face = 'bold', size = 50))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 30, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 30, vjust = 0.5, hjust = 0.5),strip.text = element_text(face = 'bold', size = 50))
bing_pos<-get_sentiments("bing") %>%
filter(sentiment="positive")
bing_pos<-get_sentiments("bing") %>%
filter(sentiment=="positive")
metal_corpus <- VCorpus(VectorSource(Metal$stemmedwords))
metal_word_tibble <- tidy(metal_corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
metal_word_tibble %>%
inner_join(bing_pos) %>%
count(word, sort = TRUE)
bing_pos<-get_sentiments("bing") %>%
filter(sentiment=="positive")
bing_neg<-get_sentiments("bing") %>%
filter(sentiment=="negative")
metal_corpus <- VCorpus(VectorSource(Metal$stemmedwords))
metal_word_tibble <- tidy(metal_corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
metal_word_tibble %>%
inner_join(bing_pos) %>%
count(word, sort = TRUE)
metal_word_tibble %>%
inner_join(bing_neg) %>%
count(word, sort = TRUE)
lyrics_sentiment
word_tibble
lyrics_sentiment[which(genre=="Metal"),]
lyrics_sentiment
View(lyrics_sentiment)
bing_word_counts <- tidy(corpus) %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts <- tidy(corpus) %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
word_tibble1<- tidy(corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
bing_word_counts <- word_tibble1 %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
word_tibble1<- tidy(corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
bing_word_counts <- word_tibble1 %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
nrc_joy_count%>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud2(word, n, max.words = 100))
nrc_joy_count<-country_word_tibble %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
nrc_joy_count%>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud2(word, n, max.words = 100))
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
nrc_joy_count%>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
country_word_tibble %>%
inner_join(nrc_joy) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(dplyr)
country_word_tibble %>%
inner_join(nrc_joy) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
country_word_tibble %>%
inner_join(nrc_sadness) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 20, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 20, vjust = 0.5, hjust = 0.5),strip.text = element_text(size = 20))
load('../output/processed_lyrics.RData')
View(dt_lyrics)
country_corpus <- VCorpus(VectorSource(Country$stemmedwords))
library(tidytext)
library(textdata)
library(dplyr)
library(stringr)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(wordcloud)
country_corpus <- VCorpus(VectorSource(Country$stemmedwords))
country_word_tibble <- tidy(country_corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
nrc_sadness<-get_sentiments("nrc") %>%
filter(sentiment == "sadness")
word_tibble1 %>%
inner_join(nrc_joy) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
word_tibble1 %>%
inner_join(nrc_sadness) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
word_tibble1<- tidy(corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
bing_word_counts <- word_tibble1 %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 20, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 20, vjust = 0.5, hjust = 0.5),strip.text = element_text(size = 20))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, nrow=5, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 20, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 20, vjust = 0.5, hjust = 0.5),strip.text = element_text(size = 20))
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 20, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 20, vjust = 0.5, hjust = 0.5),strip.text = element_text(size = 20))
seventy<- filter(dt_lyrics, year>=1970) %>%
filter(year<1980)
View(seventy)
eight<-filter(dt_lyrics, year>=1980) %>%
filter(year<1990)
nine<-filter(dt_lyrics, year>=1990) %>%
filter(year<2000)
zero<-filter(dt_lyrics, year>=2000) %>%
filter(year<2010)
ten<-filter(dt_lyrics, year>=2010) %>%
filter(year<2020)
View(ten)
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
word_tibble <-  data.frame(genre=dt_lyrics$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
lyrics1<-filter(dt_lyrics,genre!="Not Available")%>%
filter(genre!="Other")
View(lyrics1)
View(lyrics1)
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
lyrics1<-filter(dt_lyrics,genre!="Not Available")%>%
filter(genre!="Other")
word_tibble <-  data.frame(genre=lyrics1$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
lyrics1<-filter(dt_lyrics,genre!="Not Available")%>%
filter(genre!="Other")
corpus1 <- VCorpus(VectorSource(lyrics1$stemmedwords))
word_tibble <-  data.frame(genre=lyrics1$genre1,tidy(corpus))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
dt_lyrics$genre1<-factor(dt_lyrics$genre,levels=c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Not Available","Other"),ordered = TRUE)
lyrics1<-filter(dt_lyrics,genre!="Not Available")%>%
filter(genre!="Other")
corpus1 <- VCorpus(VectorSource(lyrics1$stemmedwords))
word_tibble <-  data.frame(genre=lyrics1$genre1,tidy(corpus1))%>%
group_by(genre) %>%
mutate(id = row_number()) %>%
ungroup()%>%
unnest_tokens(word, text)
lyrics_sentiment <- word_tibble %>%
inner_join(get_sentiments("bing")) %>%
count(genre, index = id %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(lyrics_sentiment, aes(index, sentiment, fill = genre)) +
geom_col(show.legend = FALSE) +
facet_wrap(~genre, ncol = 2, scales = "free")+
theme(axis.text.x = element_text(size = 20, vjust = 0.5, hjust = 0.5),axis.text.y = element_text(size = 20, vjust = 0.5, hjust = 0.5),strip.text = element_text(size = 20))
word_tibble1 %>%
inner_join(get_sentiments("bing")) %>%
filter(sentiment="positive")
bing_pos<-get_sentiments("bing") %>%
filter(sentiment=="positive")
bing_neg<-get_sentiments("bing") %>%
filter(sentiment=="negative")
word_tibble1 %>%
inner_join(bing_pos) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 10))
word_tibble1 %>%
inner_join(bing_neg) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 10))
word_tibble1 %>%
inner_join(bing_pos) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 50))
word_tibble1 %>%
inner_join(bing_neg) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 50))
word_tibble1 %>%
inner_join(bing_pos) %>%
count(word)
word_tibble1 %>%
inner_join(bing_pos) %>%
count(word)%>%
sum(n)
count_pos<-word_tibble1 %>%
inner_join(bing_pos) %>%
count(word)
sum(count_pos$n)
count_neg<-word_tibble1 %>%
inner_join(bing_neg) %>%
count(word)
sum(vount_neg$n)
count_pos<-word_tibble1 %>%
inner_join(bing_pos) %>%
count(word)
sum(count_pos$n)
count_neg<-word_tibble1 %>%
inner_join(bing_neg) %>%
count(word)
sum(count_neg$n)
View(word_tibble)
View(word_tibble1)
word_tibble1%>%
group_by(id)%>%
count(word)%>%
ungroup()
dt_lyrics$length<-word_tibble1%>%
group_by(id)%>%
count(word)%>%
ungroup()
load('../output/processed_lyrics.RData')
View(dt_lyrics)
word_tibble1%>%
group_by(id)%>%
count(word)%>%
ungroup()
View(word_tibble1)
word_tibble1%>%
group_by(id)%>%
sum(word)%>%
ungroup()
word_tibble1%>%
group_by(id)%>%
count(word)%>%
sum(n)
max<-max(word_tibble1$id)
max<-max(word_tibble1$id)
max
max<-max(word_tibble1$id)
max
for (i in 1:max){
if(i==id){length<-sum(id)/id}
}
max<-max(word_tibble1$id)
max
for (i in 1:max){
if(i==dt_lyrics$id){
length<-sum(dt_lyrics$id)/dt_lyrics$id
}
}
View(dt_lyrics)
length
max<-max(word_tibble1$id)
max
for (i in 1:max){
if(i==word_tibble1$id){
length[i]<-sum(word_tibble1$id)/word_tibble1$id
}
}
